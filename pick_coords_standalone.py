# File: pick_coords_standalone.py
# Phi√™n b·∫£n n√¢ng c·∫•p ƒë·ªÉ k·∫øt n·ªëi v·ªõi LDPlayer v√† ƒë·ªçc c·∫•u h√¨nh t·ª± ƒë·ªông.

import sys
import subprocess
import time
import os
import uuid
from pathlib import Path

# Th·ª≠ import c√°c th∆∞ vi·ªán b√™n ngo√†i
try:
    import cv2
    import numpy as np
    import pyperclip
except ImportError:
    print("L·ªói: Vui l√≤ng c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt b·∫±ng l·ªánh sau:")
    print("pip install opencv-python numpy pyperclip")
    sys.exit(1)

# ====================================================================
# === PH·∫¶N 1: T·ª∞ ƒê·ªòNG ƒê·ªåC C·∫§U H√åNH T·ª™ CONFIG.PY ======================
# ====================================================================
try:
    # Import c√°c c·∫•u h√¨nh c·∫ßn thi·∫øt t·ª´ file config.py
    from config import LDPLAYER_ADB_PATH, SCREEN_W, SCREEN_H

    # !!! THAY ƒê·ªîI ID C·ª¶A M√ÅY ·∫¢O B·∫†N MU·ªêN K·∫æT N·ªêI V√ÄO ƒê√ÇY !!!
    # B·∫°n c√≥ th·ªÉ l·∫•y ID n√†y t·ª´ giao di·ªán c·ªßa tool auto.
    DEVICE_ID = "emulator-5554"

    ADB_PATH = LDPLAYER_ADB_PATH

except ImportError:
    print("L·ªói: Kh√¥ng t√¨m th·∫•y file config.py ho·∫∑c thi·∫øu c·∫•u h√¨nh c·∫ßn thi·∫øt.")
    # C·∫•u h√¨nh d·ª± ph√≤ng n·∫øu kh√¥ng c√≥ file config.py
    ADB_PATH = r"D:\LDPlayer\LDPlayer9\adb.exe"  # S·ª≠a l·∫°i n·∫øu c·∫ßn
    DEVICE_ID = "emulator-5554"
    SCREEN_W, SCREEN_H = 900, 1600

# Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh ch·ª•p
SHOT_DIR = "test/shots"
DEBUG = True


# ====================================================================
# === PH·∫¶N 2: C√ÅC H√ÄM TI·ªÜN √çCH ADB V√Ä M√ÄN H√åNH =======================
# ====================================================================

def _run(args, text=True):
    """H√†m ch·∫°y m·ªôt l·ªánh v√† tr·∫£ v·ªÅ k·∫øt qu·∫£."""
    # ·∫®n c·ª≠a s·ªï d√≤ng l·ªánh tr√™n Windows
    startupinfo = None
    if os.name == 'nt':
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW

    return subprocess.run(args, capture_output=True, text=text, startupinfo=startupinfo)


def adb(*args, text=True):
    """H√†m g·ª≠i l·ªánh ADB t·ªõi thi·∫øt b·ªã ƒë√£ ch·ªâ ƒë·ªãnh."""
    cmd_with_device = [ADB_PATH, "-s", DEVICE_ID] + list(args)
    if DEBUG:
        print("‚Üí ADB:", " ".join([str(x) for x in cmd_with_device]))
    return _run(cmd_with_device, text=text)


def ensure_connected():
    """ƒê·∫£m b·∫£o ADB ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã."""
    if not Path(ADB_PATH).exists():
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y ADB ·ªü: {ADB_PATH}")

    # Ch·∫°y l·ªánh 'adb devices' ƒë·ªÉ ki·ªÉm tra
    out = _run([ADB_PATH, "devices"]).stdout
    if DEVICE_ID not in out or "device" not in out:
        raise RuntimeError(f"ADB ch∆∞a th·∫•y thi·∫øt b·ªã '{DEVICE_ID}'. Vui l√≤ng ƒë·∫£m b·∫£o LDPlayer ƒëang ch·∫°y.")
    print(f"‚úÖ ADB ƒë√£ k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã {DEVICE_ID}")


def screencap_cv() -> np.ndarray | None:
    """Ch·ª•p ·∫£nh m√†n h√¨nh v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng OpenCV."""
    try:
        # S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p an to√†n: l∆∞u file t·∫°m r·ªìi ƒë·ªçc
        p = adb("exec-out", "screencap", "-p", text=False)
        if p.returncode != 0 or not p.stdout:
            raise RuntimeError("Kh√¥ng ch·ª•p ƒë∆∞·ª£c m√†n h√¨nh qua ADB.")

        data = p.stdout
        img = cv2.imdecode(np.frombuffer(data, np.uint8), cv2.IMREAD_COLOR)

        if img is None:
            raise RuntimeError("Gi·∫£i m√£ ·∫£nh th·∫•t b·∫°i.")

        if DEBUG:
            Path(SHOT_DIR).mkdir(parents=True, exist_ok=True)
            ts = time.strftime("%Y%m%d_%H%M%S")
            path = Path(SHOT_DIR) / f"screen_{ts}.png"
            cv2.imwrite(str(path), img)
            print(f"üíæ ƒê√£ l∆∞u ·∫£nh ch·ª•p m√†n h√¨nh: {path} (k√≠ch th∆∞·ªõc={img.shape})")
        return img
    except Exception as e:
        print(f"L·ªói khi ch·ª•p m√†n h√¨nh: {e}")
        return None


# ====================================================================
# === PH·∫¶N 3: LOGIC CH√çNH C·ª¶A C√îNG C·ª§ C·∫ÆT ·∫¢NH ========================
# ====================================================================

# C√°c bi·∫øn to√†n c·ª•c
SCALE = 0.6  # T·ª∑ l·ªá hi·ªÉn th·ªã c·ªßa c·ª≠a s·ªï xem tr∆∞·ªõc
img = None
disp = None
start = None
dragging = False


def copy_to_clipboard(txt: str):
    """Sao ch√©p m·ªôt chu·ªói v√†o clipboard."""
    try:
        pyperclip.copy(txt)
        print(f"üìã ƒê√£ sao ch√©p v√†o clipboard: {txt}")
    except Exception:
        print("(C·∫£nh b√°o: Kh√¥ng th·ªÉ sao ch√©p v√†o clipboard. Th∆∞ vi·ªán pyperclip c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t.)")


def on_mouse(event, x, y, flags, param):
    """H√†m x·ª≠ l√Ω s·ª± ki·ªán chu·ªôt."""
    global start, dragging, disp, img

    # Chuy·ªÉn t·ªça ƒë·ªô tr√™n c·ª≠a s·ªï xem tr∆∞·ªõc v·ªÅ t·ªça ƒë·ªô g·ªëc c·ªßa ·∫£nh
    gx, gy = int(x / SCALE), int(y / SCALE)

    # Nh·∫•n chu·ªôt ph·∫£i: L·∫•y v√† sao ch√©p t·ªça ƒë·ªô c·ªßa m·ªôt ƒëi·ªÉm
    if event == cv2.EVENT_RBUTTONDOWN:
        point_txt = f"{gx},{gy}"
        print(f"üìç T·ªça ƒë·ªô ƒëi·ªÉm: {point_txt}")
        copy_to_clipboard(point_txt)

    # Nh·∫•n chu·ªôt tr√°i: B·∫Øt ƒë·∫ßu k√©o
    if event == cv2.EVENT_LBUTTONDOWN:
        start = (gx, gy)
        dragging = True

    # Di chuy·ªÉn chu·ªôt trong khi ƒëang k√©o: V·∫Ω h√¨nh ch·ªØ nh·∫≠t
    elif event == cv2.EVENT_MOUSEMOVE and dragging:
        disp[:] = cv2.resize(img, None, fx=SCALE, fy=SCALE, interpolation=cv2.INTER_AREA)
        x1, y1 = start
        cv2.rectangle(disp, (int(x1 * SCALE), int(y1 * SCALE)), (x, y), (0, 255, 0), 2)

    # Th·∫£ chu·ªôt tr√°i: Ho√†n t·∫•t vi·ªác ch·ªçn v√πng (ROI)
    elif event == cv2.EVENT_LBUTTONUP and dragging:
        dragging = False
        x1, y1 = start
        x2, y2 = gx, gy

        # S·∫Øp x·∫øp l·∫°i t·ªça ƒë·ªô ƒë·ªÉ lu√¥n c√≥ (x1, y1) l√† g√≥c tr√™n tr√°i
        left, top = min(x1, x2), min(y1, y2)
        right, bottom = max(x1, x2), max(y1, y2)

        if right <= left or bottom <= top:
            print("‚ö†Ô∏è V√πng ch·ªçn (ROI) r·ªóng, vui l√≤ng th·ª≠ l·∫°i.")
            return

        # C·∫Øt v√πng ·∫£nh ƒë√£ ch·ªçn
        roi = img[top:bottom, left:right].copy()

        # L∆∞u file v√† th√¥ng b√°o
        Path(SHOT_DIR).mkdir(parents=True, exist_ok=True)
        ts = time.strftime("%Y%m%d_%H%M%S")
        roi_filename = f"roi_{ts}_{left}-{top}_{right}-{bottom}.png"
        roi_path = Path(SHOT_DIR) / roi_filename
        cv2.imwrite(str(roi_path), roi)
        print(f"üíæ ƒê√£ l∆∞u v√πng ch·ªçn (ROI): {roi_path.resolve()}")

        roi_txt = f"{left},{top},{right},{bottom}"
        print(f"üìê T·ªça ƒë·ªô v√πng ch·ªçn (ROI): {roi_txt}")
        copy_to_clipboard(roi_txt)


if __name__ == "__main__":
    try:
        ensure_connected()
        print("ƒêang ch·ª•p ·∫£nh m√†n h√¨nh ban ƒë·∫ßu...")
        img = screencap_cv()
        if img is None:
            raise RuntimeError("Kh√¥ng th·ªÉ ch·ª•p ·∫£nh m√†n h√¨nh ban ƒë·∫ßu.")

        disp = cv2.resize(img, None, fx=SCALE, fy=SCALE, interpolation=cv2.INTER_AREA)

        title = "Chon Vung ROI (Keo chuot trai = Cat anh, Chuot phai = Lay toa do, 'r' = Lam moi, 'q'/ESC = Thoat)"
        cv2.namedWindow(title)
        cv2.setMouseCallback(title, on_mouse)

        while True:
            cv2.imshow(title, disp)
            key = cv2.waitKey(20) & 0xFF

            # Tho√°t ch∆∞∆°ng tr√¨nh
            if key in (ord('q'), 27):  # 27 l√† m√£ c·ªßa ph√≠m ESC
                break

            # Nh·∫•n 'r' ƒë·ªÉ l√†m m·ªõi ·∫£nh
            if key == ord('r'):
                print("\nüîÑ ƒêang l√†m m·ªõi ·∫£nh m√†n h√¨nh...")
                new_img = screencap_cv()
                if new_img is not None:
                    img = new_img
                    disp = cv2.resize(img, None, fx=SCALE, fy=SCALE, interpolation=cv2.INTER_AREA)
                    print("L√†m m·ªõi th√†nh c√¥ng!")
                else:
                    print("L√†m m·ªõi th·∫•t b·∫°i, gi·ªØ l·∫°i ·∫£nh c≈©.")

        cv2.destroyAllWindows()

    except Exception as e:
        print(f"\n‚ùå L·ªói nghi√™m tr·ªçng: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t.")
        sys.exit(1)