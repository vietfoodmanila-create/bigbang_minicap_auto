# -*- coding: utf-8 -*-
"""
flows_lien_minh.py
Gia nh·∫≠p Li√™n minh + ƒë·∫£m b·∫£o m·ªü giao di·ªán Li√™n minh (inside)

ƒê·∫∑c th√π flow (gi·ªØ l·∫°i):
- Ph√°n ƒëo√°n FULL/C√íN SLOT b·∫±ng m√†u (HSV) tr√™n v√πng REG_JOIN_COLOR/PT_JOIN_COLOR.
- Chu tr√¨nh m·ªü UI Li√™n minh, ki·ªÉm tra OUTSIDE/JOIN/INSIDE.

M·ªçi h√†m d√πng chung (ADB, screencap, match, log, sleep coop, swipe‚Ä¶) l·∫•y t·ª´ module.py
"""

from __future__ import annotations
import time

# ===== import helpers chung t·ª´ module.py =====
from module import (
    log_wk as _log,
    adb_safe as _adb_safe,
    tap as _tap,
    tap_center as _tap_center,
    swipe as _swipe,
    sleep_coop as _sleep_coop,
    aborted as _aborted,
    grab_screen_np as _grab_screen_np,
    find_on_frame as _find_on_frame,
    DEFAULT_THR as THR_DEFAULT,
    free_img as _free_img,         # NEW: b·ªï sung trong module.py (xem patch b√™n d∆∞·ªõi)
    mem_relief as _mem_relief,     # NEW: b·ªï sung trong module.py (xem patch b√™n d∆∞·ªõi)
    resource_path
)

# ================== REGIONS ==================
REG_OUTSIDE   = (581, 1485, 758, 1600)   # n√∫t Li√™n minh ngo√†i map
REG_JOIN_BTN  = (628, 313, 825, 391)     # "Gia nh·∫≠p li√™n minh"
REG_INSIDE    = (28, 3, 201, 75)         # header ƒë√£ ·ªü trong Li√™n minh

# ---- v√πng/ƒëi·ªÉm ki·ªÉm tra m√†u enable/disable c·ªßa n√∫t xin v√†o ----
REG_JOIN_COLOR = (780, 345, 795, 368)    # v√πng nh·ªè ƒë·ªÉ l·∫•y m√†u
PT_JOIN_COLOR  = (790, 355)              # to·∫° ƒë·ªô ƒëi·ªÉm gi·ªØa v√πng (fallback)

# ================== IMAGES ==================
IMG_OUTSIDE   = resource_path("images/lien_minh/lien-minh-outside.png")
IMG_JOIN      = resource_path("images/lien_minh/gia-nhap-lien-minh.png")
IMG_INSIDE    = resource_path("images/lien_minh/lien-minh-inside.png")

# ================== PARAMS ==================
ESC_DELAY     = 1.5
CLICK_DELAY   = 0.5

# ---- ng∆∞·ª°ng m√†u (c√≥ th·ªÉ tinh ch·ªânh theo log) ----
# "xanh" (enable): hue ~ 35..85, S/V ƒë·ªß cao
GREEN_H_LOW, GREEN_H_HIGH = 35, 85
GREEN_S_MIN, GREEN_V_MIN = 80, 80
# "x√°m" (disable): b√£o ho√† th·∫•p
GRAY_S_MAX = 35

def _sleep(s: float):
    time.sleep(s)

# ================== (ƒê·∫∂C TH√ô) Ki·ªÉm tra m√†u enable/disable ==================
def _crop_np(img, reg):
    x1, y1, x2, y2 = reg
    return img[y1:y2, x1:x2].copy()

def _classify_join_color(wk) -> str | None:
    """
    Ph√¢n lo·∫°i m√†u v√πng n√∫t xin v√†o:
      - tr·∫£ 'ok'   n·∫øu m√†u xanh (c√≥ th·ªÉ xin v√†o)
      - tr·∫£ 'full' n·∫øu m√†u x√°m (ƒë√£ ƒë·ªß ng∆∞·ªùi)
      - None n·∫øu kh√¥ng ch·∫Øc (thi·∫øu frame/ngo√†i range)
    """
    img = _grab_screen_np(wk)
    if img is None:
        return None
    try:
        import cv2, numpy as np
        # ∆∞u ti√™n l·∫•y trung b√¨nh tr√™n ROI nh·ªè
        roi = _crop_np(img, REG_JOIN_COLOR)
        if roi is None or roi.size == 0:
            # fallback: l·∫•y 3x3 quanh ƒëi·ªÉm PT_JOIN_COLOR
            x, y = PT_JOIN_COLOR
            x1, y1, x2, y2 = max(0, x-1), max(0, y-1), x+2, y+2
            roi = img[y1:y2, x1:x2]

        hsv = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)
        h = float(np.mean(hsv[...,0]))
        s = float(np.mean(hsv[...,1]))
        v = float(np.mean(hsv[...,2]))

        _log(wk, f"[COLOR] H={h:.1f} S={s:.1f} V={v:.1f}")

        # X√°m: b√£o ho√† th·∫•p
        if s <= GRAY_S_MAX:
            _free_img(img, roi, hsv)
            return "full"

        # Xanh: hue n·∫±m trong d·∫£i xanh + ƒë·ªß S/V
        if (GREEN_H_LOW <= h <= GREEN_H_HIGH) and (s >= GREEN_S_MIN) and (v >= GREEN_V_MIN):
            _free_img(img, roi, hsv)
            return "ok"

        _free_img(img, roi, hsv)
        return None
    except Exception:
        _free_img(img)
        return None

# ------------------ Core: m·ªü UI Li√™n minh ------------------
def _open_guild_ui(wk) -> str:
    """
    - L·∫∑p: n·∫øu ch∆∞a th·∫•y OUTSIDE trong REG_OUTSIDE -> BACK + ƒë·ª£i -> th·ª≠ l·∫°i
    - Khi th·∫•y -> ESC -> ƒë·ª£i 1s -> TAP outside -> ki·ªÉm tra JOIN/INSIDE t·ªëi ƒëa 5 l·∫ßn
      * 'join'   -> return "join"
      * 'inside' -> return "inside"
      * 'abort'  -> khi b·ªã h·ªßy
    """
    while True:
        if _aborted(wk):
            _log(wk, "‚õî H·ªßy theo y√™u c·∫ßu (open_guild_ui).")
            return "abort"

        # ch·ªù OUTSIDE
        while True:
            if _aborted(wk):
                _log(wk, "‚õî H·ªßy theo y√™u c·∫ßu (open_guild_ui/inner).")
                return "abort"
            img = _grab_screen_np(wk)
            ok_out, _, _ = _find_on_frame(img, IMG_OUTSIDE, region=REG_OUTSIDE, threshold=THR_DEFAULT)
            _free_img(img)
            if ok_out:
                break
            _log(wk, "üîé Ch∆∞a th·∫•y Li√™n minh (outside). BACK d·ªçn UI r·ªìi th·ª≠ l·∫°i‚Ä¶")
            _adb_safe(wk, "shell", "input", "keyevent", "4", timeout=2)
            if not _sleep_coop(wk, ESC_DELAY):
                return "abort"

        _log(wk, "üü¶ Th·∫•y Li√™n minh (outside) ‚Üí ESC, ƒë·ª£i 1s r·ªìi TAP m·ªü giao di·ªán.")
        _adb_safe(wk, "shell", "input", "keyevent", "4", timeout=2)  # ESC tr∆∞·ªõc khi m·ªü
        if not _sleep_coop(wk, 1.0):
            return "abort"
        _tap_center(wk, REG_OUTSIDE)
        if not _sleep_coop(wk, CLICK_DELAY):
            return "abort"

        # ki·ªÉm tra join/inside
        tries = 0
        while tries < 5:
            if _aborted(wk):
                _log(wk, "‚õî H·ªßy theo y√™u c·∫ßu (wait join/inside).")
                return "abort"
            img_now = _grab_screen_np(wk)
            ok_join, _, _ = _find_on_frame(img_now, IMG_JOIN, region=REG_JOIN_BTN, threshold=THR_DEFAULT)
            if ok_join:
                _free_img(img_now)
                _log(wk, "üü© ƒê√£ hi·ªÉn th·ªã n√∫t 'Gia nh·∫≠p li√™n minh'.")
                return "join"
            ok_in, _, _ = _find_on_frame(img_now, IMG_INSIDE, region=REG_INSIDE, threshold=THR_DEFAULT)
            _free_img(img_now)
            if ok_in:
                _log(wk, "üü© ƒê√£ ·ªü giao di·ªán Li√™n minh (inside).")
                return "inside"
            tries += 1
            if not _sleep_coop(wk, 0.6):
                return "abort"

        _log(wk, "‚Ü©Ô∏è 5 l·∫ßn ch∆∞a th·∫•y 'Gia nh·∫≠p'/'Inside' ‚Üí quay l·∫°i b·∫•m Outside.")

# ------------------ Public: gia nh·∫≠p li√™n minh ------------------
def join_guild_once(wk, log=None) -> bool:
    """
    Logic xin v√†o li√™n minh (tu√¢n th·ªß flow c≈©, th√™m 2 nh√°nh theo config 'guild_target'):

    - N·∫øu KH√îNG c√≥ user_config 'guild_target' (ho·∫∑c value r·ªóng):
        + M·ªói v√≤ng: m·ªü UI li√™n minh (d√πng _open_guild_ui c≈©) ‚Üí n·∫øu 'inside' th√¨ DONE.
        + N·∫øu ·ªü tr·∫°ng th√°i c√≥ n√∫t 'gia-nhap-lien-minh' ‚Üí ki·ªÉm tra m√†u b·∫±ng _classify_join_color:
            * 'full' (x√°m) ‚Üí ESC, ƒë·ª£i 15s, m·ªü l·∫°i UI, l·∫∑p.
            * 'ok' ho·∫∑c None ‚Üí TAP 'gia-nhap-lien-minh' 1 l·∫ßn r·ªìi theo d√µi; v√†o 'inside' l√† DONE.
    - N·∫øu C√ì user_config 'guild_target' (value != ""):
        + M·ªói v√≤ng: m·ªü UI li√™n minh ‚Üí n·∫øu 'inside' th√¨ DONE.
        + T√¨m 'kiem-tra-chung.png' ·ªü (663,156,861,243), n·∫øu c√≥:
            * TAP √¥ nh·∫≠p (391,201) ‚Üí xo√° s·∫°ch (g·ª≠i nhi·ªÅu DEL) ‚Üí _type_text(value)
            * TAP n√∫t 'kiem-tra-chung.png' 2 l·∫ßn ƒë·ªÉ t√¨m
            * Trong 2s, m·ªói 0.25s ki·ªÉm tra 'chua-thay-lien-minh.png' ·ªü (261,765,651,821):
                - N·∫øu TH·∫§Y ‚Üí log c·∫£nh b√°o ƒë·ªè, ngh·ªâ 5 ph√∫t, return False (nh∆∞·ªùng v√≤ng sau)
            * N·∫øu KH√îNG th·∫•y 'chua-thay-lien-minh' ‚Üí t√¨m 'gia-nhap-lien-minh.png' ·ªü (315,1363,595,1456):
                - N·∫øu TH·∫§Y ‚Üí TAP 2 l·∫ßn; theo d√µi chuy·ªÉn 'inside'. Th·ª≠ t·ªëi ƒëa 2 l·∫ßn TAP-2-l·∫ßn.
                - N·∫øu KH√îNG TH·∫§Y ‚Üí n·∫øu c√≤n ƒëang ·ªü 'kiem-tra-chung' th√¨ l·∫∑p l·∫°i t√¨m & nh·∫≠p.
            * N·∫øu ƒë√£ TAP 'gia-nhap-lien-minh' 2 l·∫ßn m√† v·∫´n kh√¥ng v√†o 'inside':
                - C·∫≠p nh·∫≠t last_leave_time = NOW qua CloudClient (tham kh·∫£o flows_thoat_lien_minh),
                  r·ªìi return False ƒë·ªÉ chuy·ªÉn t√†i kho·∫£n kh√°c.

    Ghi ch√∫: d√πng l·∫°i helpers/module c≈©: _open_guild_ui, _classify_join_color, find_on_frame, _tap/_type_text/_sleep_coop/_adb_safe, resource_path...
    """
    from module import (
        log_wk as _log, grab_screen_np as _grab_screen_np, free_img,
        find_on_frame, tap as _tap, sleep_coop as _sleep_coop, adb_safe as _adb_safe,
        resource_path, type_text as _type_text
    )
    import time
    from datetime import datetime

    # ===== IMG & REG theo y√™u c·∫ßu =====
    IMG_JOIN_BTN        = resource_path("images/lien_minh/gia-nhap.png")
    IMG_INSIDE          = resource_path("images/lien_minh/lien-minh-inside.png")
    IMG_KIEM_TRA_CHUNG  = resource_path("images/lien_minh/kiem-tra-chung.png")
    IMG_SEARCH_NOTFOUND = resource_path("images/lien_minh/chua-thay-lien-minh.png")

    REG_JOIN_BTN        = (315, 1363, 595, 1456)
    REG_KIEM_TRA_CHUNG  = (663, 156, 861, 243)
    REG_SEARCH_NOTFOUND = (261, 765, 651, 821)
    # REG_INSIDE: tu·ª≥ ·∫£nh 'lien-minh-inside.png' c·ªßa b·∫°n; d√πng v√πng an to√†n quanh header trong UI inside
    REG_INSIDE          = (581, 134, 843, 228)

    # To·∫° ƒë·ªô √¥ nh·∫≠p cho ph∆∞∆°ng √°n 2
    PT_SEARCH_INPUT     = (391, 201)

    THR = 0.86

    def _state_now():
        img = _grab_screen_np(wk)
        try:
            ok_inside, _, _ = find_on_frame(img, IMG_INSIDE, region=REG_INSIDE, threshold=THR)
            if ok_inside:
                return "inside", None
            ok_join, pt_join, _ = find_on_frame(img, IMG_JOIN_BTN, region=REG_JOIN_BTN, threshold=THR)
            if ok_join and pt_join:
                return "join_btn", pt_join
            ok_kc, pt_kc, _ = find_on_frame(img, IMG_KIEM_TRA_CHUNG, region=REG_KIEM_TRA_CHUNG, threshold=THR)
            if ok_kc and pt_kc:
                return "kiemtra", pt_kc
            return "unknown", None
        finally:
            free_img(img)

    def _get_guild_target() -> str:
        val = ""  # m·∫∑c ƒë·ªãnh khi ch∆∞a c√≥ c·∫•u h√¨nh / wk.cloud r·ªóng
        try:
            cloud = getattr(wk, "cloud", None)
            if cloud:
                # CloudClient.get_user_config() tr·∫£ v·ªÅ CHU·ªñI value; 404 -> "" (kh√¥ng n√©m l·ªói)
                val = str(cloud.get_user_config("guild_target") or "").strip()
            else:
                _log(wk, "[GUILD] wk.cloud r·ªóng ‚Äî coi nh∆∞ ch∆∞a c√≥ config.")
        except Exception as e:
            _log(wk, f"[GUILD] get_user_config('guild_target') l·ªói: {e}")
        return val

    # ===== v√≤ng l·∫∑p t·ªëi ƒëa 5 l·∫ßn nh∆∞ y√™u c·∫ßu =====
    join_double_taps = 0
    for round_idx in range(1, 6):
        if not _sleep_coop(wk, 0.2): return False

        # Lu√¥n m·ªü UI theo flow c≈© (ESC ‚Üí m·ªü l·∫°i). _open_guild_ui l√† h√†m c≈© ƒë√£ c√≥ trong file.
        state = _open_guild_ui(wk)
        if state == "abort":
            _log(wk, "[GUILD] H·ªßy m·ªü UI li√™n minh."); return False
        if state == "inside":
            _log(wk, "[GUILD] ƒêang ·ªü trong li√™n minh (inside)."); return True

        # Load config_value M·ªñI V√íNG (kh√¥ng cache)
        guild_target = _get_guild_target()
        has_target = bool(guild_target)

        # ƒê√°nh gi√° tr·∫°ng th√°i hi·ªán t·∫°i sau khi UI ƒë√£ m·ªü
        cur, pt = _state_now()
        _log(wk, f"[GUILD] V√≤ng {round_idx}/5 ‚Äî guild_target={'<r·ªóng>' if not has_target else guild_target} ‚Äî state={cur} pt={pt}")

        # ===== PH∆Ø∆†NG √ÅN 1: KH√îNG c√≥ guild_target ‚Üí ƒëi theo join button + ki·ªÉm m√†u =====
        if not has_target:
            if cur == "inside":
                return True
            if cur != "join_btn" or not pt:
                # Kh√¥ng th·∫•y join button ‚Üí l·∫∑p
                if not _sleep_coop(wk, 0.8): return False
                continue

            # Ki·ªÉm tra m√†u theo code c≈©
            if not _sleep_coop(wk, 0.2): return False
            join_state = _classify_join_color(wk)  # 'ok' | 'full' | None (h√†m c≈©)
            if join_state == "full":
                _log(wk, "üöß N√∫t xin v√†o ƒëang X√ÅM (ƒë·ªß ng∆∞·ªùi). ESC v√† ch·ªù 15s r·ªìi th·ª≠ l·∫°i‚Ä¶")
                _adb_safe(wk, "shell", "input", "keyevent", "4", timeout=2)  # ESC
                if not _sleep_coop(wk, 15.0): return False
                continue
            elif join_state == "ok":
                _log(wk, "‚úÖ N√∫t xin v√†o ƒëang XANH ‚Äî ti·∫øn h√†nh xin v√†o.")
            else:
                _log(wk, "‚ÑπÔ∏è Kh√¥ng ch·∫Øc m√†u ‚Äî v·∫´n th·ª≠ xin v√†o.")

            _tap(wk, *pt)
            if not _sleep_coop(wk, 0.3): return False

            # Theo d√µi chuy·ªÉn v√†o 'inside' trong 10 * 0.5s
            follow_deadline = time.time() + 5.0
            while time.time() < follow_deadline:
                s2, _ = _state_now()
                if s2 == "inside":
                    _log(wk, "üéâ ƒê√£ v√†o li√™n minh (inside).")
                    return True
                if not _sleep_coop(wk, 0.5): return False
            # ch∆∞a v√†o ‚Äî l·∫∑p v√≤ng ngo√†i
            continue

        # ===== PH∆Ø∆†NG √ÅN 2: C√ì guild_target ‚Üí d√πng 'kiem-tra-chung' ƒë·ªÉ t√¨m theo t√™n
        else:
            # B·∫Øt bu·ªôc c√≥ 'kiem-tra-chung' tr√™n header ƒë·ªÉ thao t√°c
            if cur != "kiemtra":
                # th·ª≠ t√¨m l·∫°i
                img = _grab_screen_np(wk)
                try:
                    ok_kc, pt_kc, _ = find_on_frame(img, IMG_KIEM_TRA_CHUNG, region=REG_KIEM_TRA_CHUNG, threshold=THR)
                    if ok_kc and pt_kc:
                        cur, pt = "kiemtra", pt_kc
                finally:
                    free_img(img)

            if cur != "kiemtra":
                _log(wk, "[GUILD] Ch∆∞a th·∫•y 'kiem-tra-chung' ‚Äî l·∫∑p.")
                if not _sleep_coop(wk, 0.8): return False
                continue

            # Nh·∫≠p t√™n li√™n minh = guild_target
            _tap(wk, *PT_SEARCH_INPUT)
            if not _sleep_coop(wk, 0.15): return False

            # Xo√° s·∫°ch n·ªôi dung c≈©: di chuy·ªÉn v·ªÅ cu·ªëi r·ªìi DEL nhi·ªÅu l·∫ßn
            _adb_safe(wk, "shell", "input", "keyevent", "123", timeout=2)  # KEYCODE_MOVE_END
            for _ in range(24):
                _adb_safe(wk, "shell", "input", "keyevent", "67", timeout=2)  # KEYCODE_DEL nhanh
            if not _sleep_coop(wk, 0.05): return False

            _type_text(wk, guild_target)
            if not _sleep_coop(wk, 0.15): return False

            # B·∫•m 'kiem-tra-chung' 2 l·∫ßn
            for _ in range(2):
                img = _grab_screen_np(wk)
                try:
                    ok_kc, pt_kc, _ = find_on_frame(img, IMG_KIEM_TRA_CHUNG, region=REG_KIEM_TRA_CHUNG, threshold=THR)
                    _log(wk, f"[GUILD] TAP 'kiem-tra-chung' ‚Üí ok={ok_kc} pt={pt_kc}")
                finally:
                    free_img(img)
                if ok_kc and pt_kc:
                    _tap(wk, *pt_kc)
                    if not _sleep_coop(wk, 1.0): return False

            # 2s theo d√µi 'chua-thay-lien-minh'
            not_found = False
            until = time.time() + 2.0
            while time.time() < until:
                img = _grab_screen_np(wk)
                try:
                    ok_nf, _, _ = find_on_frame(img, IMG_SEARCH_NOTFOUND, region=REG_SEARCH_NOTFOUND, threshold=THR)
                finally:
                    free_img(img)
                _log(wk, f"[GUILD] Check 'chua-thay-lien-minh' ‚Üí {ok_nf}")
                if ok_nf:
                    not_found = True
                    break
                if not _sleep_coop(wk, 0.25): return False

            if not_found:
                _log(wk, f"[GUILD][‚ùó] KH√îNG T√åM TH·∫§Y li√™n minh '{guild_target}'. Ngh·ªâ 5 ph√∫t r·ªìi th·ª≠ l·∫°i. Vui l√≤ng c·∫≠p nh·∫≠t t√™n ch√≠nh x√°c.")
                _sleep_coop(wk, 300.0)  # 5 ph√∫t
                return False

            # N·∫øu c√≥ k·∫øt qu·∫£ ‚Äî t√¨m n√∫t 'gia-nhap-lien-minh' trong v√πng n√∫t
            if not _sleep_coop(wk, 2.0): return False
            img = _grab_screen_np(wk)
            try:
                ok_j, pt_j, _ = find_on_frame(img, IMG_JOIN_BTN, region=REG_JOIN_BTN, threshold=THR)
                _log(wk, f"[GUILD] T√¨m 'gia-nhap-lien-minh' ‚Üí ok={ok_j} pt={pt_j}")
            finally:
                free_img(img)

            if ok_j and pt_j:
                # B·∫•m 2 l·∫ßn nh∆∞ y√™u c·∫ßu r·ªìi theo d√µi
                _tap(wk, *pt_j)
                if not _sleep_coop(wk, CLICK_DELAY): return False
                _tap(wk, *pt_j)
                join_double_taps += 1
                _log(wk, f"[GUILD] ƒê√£ TAP 'gia-nhap-lien-minh' 2 l·∫ßn (l·∫ßn {join_double_taps}/2).")

                # Theo d√µi chuy·ªÉn 'inside'
                until2 = time.time() + 5.0
                while time.time() < until2:
                    s2, _ = _state_now()
                    if s2 == "inside":
                        _log(wk, "üéâ ƒê√£ v√†o li√™n minh (inside) sau khi Join theo t√™n.")
                        return True
                    if not _sleep_coop(wk, 0.5): return False

                if join_double_taps >= 2:
                    # C·∫≠p nh·∫≠t last_leave_time = NOW r·ªìi d·ª´ng t√†i kho·∫£n n√†y
                    cloud = getattr(wk, "cloud", None)
                    ga_id = getattr(wk, "ga_id", None)
                    if cloud and ga_id:
                        try:
                            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            cloud.update_game_account(int(ga_id), {"last_leave_time": now})
                            _log(wk, f"[GUILD] üìù C·∫≠p nh·∫≠t last_leave_time={now} do Join 2 l∆∞·ª£t kh√¥ng th√†nh.")
                        except Exception as e:
                            _log(wk, f"[GUILD] ‚ö†Ô∏è L·ªói c·∫≠p nh·∫≠t last_leave_time: {e}")
                    return False

                # ch∆∞a ƒë·ªß 2 l·∫ßn ‚Äî l·∫∑p v√≤ng ngo√†i ƒë·ªÉ th·ª≠ l·∫°i
                continue

            else:
                # Kh√¥ng th·∫•y join button; n·∫øu v·∫´n c√≤n 'kiem-tra-chung' th√¨ l·∫∑p l·∫°i nh·∫≠p/ki·ªÉm tra
                _log(wk, "[GUILD] Kh√¥ng th·∫•y n√∫t 'gia-nhap-lien-minh'; th·ª≠ l·∫°i quy tr√¨nh t√¨m.")
                if not _sleep_coop(wk, 0.8): return False
                continue

    _log(wk, "[GUILD] H·∫øt 5 v√≤ng th·ª≠ xin v√†o ‚Äî d·ª´ng.")
    return False

# ------------------ Public: ƒë·∫£m b·∫£o inside ------------------
def ensure_guild_inside(wk, log=print) -> bool:
    """
    - N·∫øu th·∫•y INSIDE trong REG_INSIDE ‚Üí True
    - N·∫øu ch∆∞a: l·∫∑p BACK t·ªõi khi th·∫•y OUTSIDE ‚Üí TAP outside ‚Üí ki·ªÉm tra l·∫°i INSIDE; l·∫∑p t·ªõi khi True
    """
    while True:
        if _aborted(wk):
            _log(wk, "‚õî H·ªßy theo y√™u c·∫ßu (ensure_guild_inside).")
            _mem_relief()
            return False

        img = _grab_screen_np(wk)
        ok_in, _, _ = _find_on_frame(img, IMG_INSIDE, region=REG_INSIDE, threshold=THR_DEFAULT)
        _free_img(img)
        if ok_in:
            _log(wk, "‚úÖ ƒêang ·ªü giao di·ªán Li√™n minh (inside).")
            _mem_relief()
            return True

        img2 = _grab_screen_np(wk)
        ok_out, _, _ = _find_on_frame(img2, IMG_OUTSIDE, region=REG_OUTSIDE, threshold=THR_DEFAULT)
        _free_img(img2)
        if not ok_out:
            _log(wk, "üîé Ch∆∞a th·∫•y 'Li√™n minh' (outside). BACK d·ªçn UI r·ªìi th·ª≠ l·∫°i‚Ä¶")
            _adb_safe(wk, "shell", "input", "keyevent", "4", timeout=2)
            if not _sleep_coop(wk, ESC_DELAY):
                _mem_relief()
                return False
            continue

        _log(wk, "üü¶ Th·∫•y Li√™n minh (outside) ‚Üí TAP m·ªü giao di·ªán.")
        _tap_center(wk, REG_OUTSIDE)
        if not _sleep_coop(wk, CLICK_DELAY):
            _mem_relief()
            return False
